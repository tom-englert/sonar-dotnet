<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="S101_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S101_Description" xml:space="preserve">
    <value>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.</value>
  </data>
  <data name="S101_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S101_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S101_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S101_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S101_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S101_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S101_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S101_Title" xml:space="preserve">
    <value>Class names should comply with a naming convention</value>
  </data>
  <data name="S101_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S103_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S103_Description" xml:space="preserve">
    <value>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</value>
  </data>
  <data name="S103_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S103_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S103_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S103_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S103_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S103_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S103_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S103_Title" xml:space="preserve">
    <value>Lines should not be too long</value>
  </data>
  <data name="S103_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S104_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S104_Description" xml:space="preserve">
    <value>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test.</value>
  </data>
  <data name="S104_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S104_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S104_RemediationCost" xml:space="preserve">
    <value>1h</value>
  </data>
  <data name="S104_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S104_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S104_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S104_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S104_Title" xml:space="preserve">
    <value>Files should not have too many lines of code</value>
  </data>
  <data name="S104_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1048_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S1048_Description" xml:space="preserve">
    <value>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process integrity if the finalizer cannot free or destroy resources.</value>
  </data>
  <data name="S1048_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1048_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1048_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1048_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1048_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S1048_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1048_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1048_Title" xml:space="preserve">
    <value>Finalizers should not throw exceptions</value>
  </data>
  <data name="S1048_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S105_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S105_Description" xml:space="preserve">
    <value>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</value>
  </data>
  <data name="S105_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S105_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S105_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S105_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S105_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S105_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S105_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S105_Title" xml:space="preserve">
    <value>Tabulation characters should not be used</value>
  </data>
  <data name="S105_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1066_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1066_Description" xml:space="preserve">
    <value>Merging collapsible if statements increases the code's readability.</value>
  </data>
  <data name="S1066_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1066_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1066_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1066_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1066_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1066_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1066_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S1066_Title" xml:space="preserve">
    <value>Collapsible "if" statements should be merged</value>
  </data>
  <data name="S1066_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1067_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1067_Description" xml:space="preserve">
    <value>Complex boolean expressions are hard to read and so to maintain.</value>
  </data>
  <data name="S1067_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1067_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1067_RemediationCost" xml:space="preserve">
    <value>3min</value>
  </data>
  <data name="S1067_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1067_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1067_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1067_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1067_Title" xml:space="preserve">
    <value>Expressions should not be too complex</value>
  </data>
  <data name="S1067_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S107_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S107_Description" xml:space="preserve">
    <value>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the procedure is doing too many things.</value>
  </data>
  <data name="S107_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S107_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S107_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S107_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S107_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S107_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S107_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S107_Title" xml:space="preserve">
    <value>Procedures should not have too many parameters</value>
  </data>
  <data name="S107_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1075_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1075_Description" xml:space="preserve">
    <value>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by customizable parameter.</value>
  </data>
  <data name="S1075_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1075_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1075_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S1075_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1075_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1075_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1075_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1075_Title" xml:space="preserve">
    <value>URIs should not be hardcoded</value>
  </data>
  <data name="S1075_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S108_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S108_Description" xml:space="preserve">
    <value>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</value>
  </data>
  <data name="S108_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S108_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S108_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S108_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S108_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S108_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S108_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S108_Title" xml:space="preserve">
    <value>Nested blocks of code should not be left empty</value>
  </data>
  <data name="S108_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1110_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1110_Description" xml:space="preserve">
    <value>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed. </value>
  </data>
  <data name="S1110_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1110_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1110_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S1110_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1110_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1110_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1110_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S1110_Title" xml:space="preserve">
    <value>Redundant pairs of parentheses should be removed</value>
  </data>
  <data name="S1110_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S112_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S112_Description" xml:space="preserve">
    <value>Throwing such general exceptions as Exception, SystemException, ApplicationException, IndexOutOfRangeException, NullReferenceException, OutOfMemoryException and ExecutionEngineException prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. </value>
  </data>
  <data name="S112_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S112_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S112_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S112_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S112_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S112_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S112_Tags" xml:space="preserve">
    <value>cwe,error-handling</value>
  </data>
  <data name="S112_Title" xml:space="preserve">
    <value>General exceptions should never be thrown</value>
  </data>
  <data name="S112_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1125_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1125_Description" xml:space="preserve">
    <value>Redundant Boolean literals should be removed from expressions to improve readability.</value>
  </data>
  <data name="S1125_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1125_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1125_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1125_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1125_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1125_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1125_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S1125_Title" xml:space="preserve">
    <value>Boolean literals should not be redundant</value>
  </data>
  <data name="S1125_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1134_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1134_Description" xml:space="preserve">
    <value>FIXME tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</value>
  </data>
  <data name="S1134_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1134_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1134_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1134_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1134_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S1134_Title" xml:space="preserve">
    <value>Track uses of "FIXME" tags</value>
  </data>
  <data name="S1134_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1135_Category" xml:space="preserve">
    <value>Info Code Smell</value>
  </data>
  <data name="S1135_Description" xml:space="preserve">
    <value>TODO tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</value>
  </data>
  <data name="S1135_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1135_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1135_Severity" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="S1135_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1135_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S1135_Title" xml:space="preserve">
    <value>Track uses of "TODO" tags</value>
  </data>
  <data name="S1135_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S114_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S114_Description" xml:space="preserve">
    <value>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</value>
  </data>
  <data name="S114_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S114_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S114_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S114_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S114_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S114_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S114_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S114_Title" xml:space="preserve">
    <value>Interface names should comply with a naming convention</value>
  </data>
  <data name="S114_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1145_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1145_Description" xml:space="preserve">
    <value>if statements with conditions that are always false have the effect of making blocks of code non-functional. if statements with conditions that are always true are completely redundant, and make the code less readable.</value>
  </data>
  <data name="S1145_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1145_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1145_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1145_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1145_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1145_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1145_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S1145_Title" xml:space="preserve">
    <value>Useless "if(true) {...}" and "if(false){...}" blocks should be removed</value>
  </data>
  <data name="S1145_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1147_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S1147_Description" xml:space="preserve">
    <value>End statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without executing Dispose or Finalize methods, or executing Finally blocks. Therefore, it should be avoided.</value>
  </data>
  <data name="S1147_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1147_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1147_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1147_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1147_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S1147_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1147_Tags" xml:space="preserve">
    <value>cwe,suspicious</value>
  </data>
  <data name="S1147_Title" xml:space="preserve">
    <value>"End" statements should not be used</value>
  </data>
  <data name="S1147_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1151_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1151_Description" xml:space="preserve">
    <value>The Select...Case statement should be used only to clearly define some new branches in the control flow. As soon as a case clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause should be extracted into a dedicated procedure.</value>
  </data>
  <data name="S1151_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1151_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1151_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1151_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1151_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1151_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1151_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1151_Title" xml:space="preserve">
    <value>"Select...Case" clauses should not have too many lines of code</value>
  </data>
  <data name="S1151_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S117_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S117_Description" xml:space="preserve">
    <value>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.This rule checks that all local variables follow a naming convention.</value>
  </data>
  <data name="S117_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S117_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S117_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S117_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S117_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S117_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S117_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S117_Title" xml:space="preserve">
    <value>Local variable names should comply with a naming convention</value>
  </data>
  <data name="S117_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1172_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1172_Description" xml:space="preserve">
    <value>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</value>
  </data>
  <data name="S1172_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1172_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1172_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1172_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1172_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1172_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1172_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S1172_Title" xml:space="preserve">
    <value>Unused procedure parameters should be removed</value>
  </data>
  <data name="S1172_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1186_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1186_Description" xml:space="preserve">
    <value>There are several reasons for a method not to have a method body:</value>
  </data>
  <data name="S1186_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1186_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1186_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1186_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1186_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1186_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1186_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S1186_Title" xml:space="preserve">
    <value>Methods should not be empty</value>
  </data>
  <data name="S1186_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1197_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1197_Description" xml:space="preserve">
    <value>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the variable name to know whether or not a variable is an array.</value>
  </data>
  <data name="S1197_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1197_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1197_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1197_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1197_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1197_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1197_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S1197_Title" xml:space="preserve">
    <value>Array designators "()" should be on the type, not the variable</value>
  </data>
  <data name="S1197_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S122_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S122_Description" xml:space="preserve">
    <value>For better readability, do not put more than one statement on a single line.</value>
  </data>
  <data name="S122_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S122_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S122_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S122_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S122_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S122_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S122_Tags" xml:space="preserve">
    <value>style</value>
  </data>
  <data name="S122_Title" xml:space="preserve">
    <value>Statements should be on separate lines</value>
  </data>
  <data name="S122_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1226_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S1226_Description" xml:space="preserve">
    <value>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug. Instead, initial values of parameters should be, if not treated as readonly then at least read before reassignment.</value>
  </data>
  <data name="S1226_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1226_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1226_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1226_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1226_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1226_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1226_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1226_Title" xml:space="preserve">
    <value>Method parameters and caught exceptions should not be reassigned</value>
  </data>
  <data name="S1226_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S126_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S126_Description" xml:space="preserve">
    <value>This rule applies whenever an If statement is followed by one or more ElseIf statements; the final ElseIf should be followed by an Else statement.</value>
  </data>
  <data name="S126_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S126_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S126_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S126_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S126_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S126_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S126_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S126_Title" xml:space="preserve">
    <value>"If ... ElseIf" constructs should end with "Else" clauses</value>
  </data>
  <data name="S126_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1301_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1301_Description" xml:space="preserve">
    <value>switch statements are useful when there are many different cases depending on the value of the same expression.</value>
  </data>
  <data name="S1301_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1301_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1301_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1301_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1301_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1301_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1301_Tags" xml:space="preserve">
    <value>bad-practice</value>
  </data>
  <data name="S1301_Title" xml:space="preserve">
    <value>"Select" statements should have at least 3 "Case" clauses</value>
  </data>
  <data name="S1301_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S131_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S131_Description" xml:space="preserve">
    <value>The requirement for a final Case Else clause is defensive programming.</value>
  </data>
  <data name="S131_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S131_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S131_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S131_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S131_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S131_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S131_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S131_Title" xml:space="preserve">
    <value>"Select" statements should end with a "Case Else" clause</value>
  </data>
  <data name="S131_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1313_Category" xml:space="preserve">
    <value>Minor Security Hotspot</value>
  </data>
  <data name="S1313_Description" xml:space="preserve">
    <value>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S1313_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1313_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1313_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1313_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1313_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1313_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1313_Tags" xml:space="preserve">
    <value>owasp-a3</value>
  </data>
  <data name="S1313_Title" xml:space="preserve">
    <value>Using hardcoded IP addresses is security-sensitive</value>
  </data>
  <data name="S1313_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S134_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S134_Description" xml:space="preserve">
    <value>Nested If, Select, For, For Each, While, Do, and Try statements are key ingredients for making what's known as "Spaghetti code".</value>
  </data>
  <data name="S134_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S134_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S134_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S134_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S134_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S134_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S134_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S134_Title" xml:space="preserve">
    <value>Control flow statements "If", "For", "For Each", "Do", "While", "Select" and "Try" should not be nested too deeply</value>
  </data>
  <data name="S134_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S138_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S138_Description" xml:space="preserve">
    <value>A procedure that grows too large tends to aggregate too many responsibilities.</value>
  </data>
  <data name="S138_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S138_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S138_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S138_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S138_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S138_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S138_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S138_Title" xml:space="preserve">
    <value>Procedures should not have too many lines of code</value>
  </data>
  <data name="S138_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S139_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S139_Description" xml:space="preserve">
    <value>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</value>
  </data>
  <data name="S139_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S139_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S139_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S139_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S139_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S139_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S139_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S139_Title" xml:space="preserve">
    <value>Comments should not be located at the end of lines of code</value>
  </data>
  <data name="S139_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1451_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S1451_Description" xml:space="preserve">
    <value>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </value>
  </data>
  <data name="S1451_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1451_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1451_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1451_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1451_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S1451_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1451_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1451_Title" xml:space="preserve">
    <value>Track lack of copyright and license headers</value>
  </data>
  <data name="S1451_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1479_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1479_Description" xml:space="preserve">
    <value>When Select Case statements have large sets of case clauses, it is usually an attempt to map two sets of data. A Dictionary should be used instead to make the code more readable and maintainable.</value>
  </data>
  <data name="S1479_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1479_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1479_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1479_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1479_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1479_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1479_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1479_Title" xml:space="preserve">
    <value>"Select Case" statements should not have too many "Case" clauses</value>
  </data>
  <data name="S1479_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1481_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1481_Description" xml:space="preserve">
    <value>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</value>
  </data>
  <data name="S1481_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1481_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1481_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1481_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1481_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1481_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1481_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S1481_Title" xml:space="preserve">
    <value>Unused local variables should be removed</value>
  </data>
  <data name="S1481_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1541_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1541_Description" xml:space="preserve">
    <value>The cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</value>
  </data>
  <data name="S1541_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1541_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1541_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1541_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1541_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1541_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1541_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1541_Title" xml:space="preserve">
    <value>Functions, procedures and properties should not be too complex</value>
  </data>
  <data name="S1541_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1542_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1542_Description" xml:space="preserve">
    <value>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular expression.</value>
  </data>
  <data name="S1542_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1542_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1542_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1542_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1542_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1542_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1542_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S1542_Title" xml:space="preserve">
    <value>Functions and procedures should comply with a naming convention</value>
  </data>
  <data name="S1542_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1643_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1643_Description" xml:space="preserve">
    <value>StringBuilder is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</value>
  </data>
  <data name="S1643_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1643_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1643_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1643_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1643_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1643_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1643_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S1643_Title" xml:space="preserve">
    <value>Strings should not be concatenated using "+" or "&amp;" in a loop</value>
  </data>
  <data name="S1643_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1645_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1645_Description" xml:space="preserve">
    <value>Consistently using the &amp; operator for string concatenation make the developer intentions clear.</value>
  </data>
  <data name="S1645_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1645_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1645_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1645_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1645_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1645_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1645_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S1645_Title" xml:space="preserve">
    <value>The "&amp;" operator should be used to concatenate strings</value>
  </data>
  <data name="S1645_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1654_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1654_Description" xml:space="preserve">
    <value>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</value>
  </data>
  <data name="S1654_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1654_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1654_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1654_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1654_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1654_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1654_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S1654_Title" xml:space="preserve">
    <value>Method parameters should follow a naming convention</value>
  </data>
  <data name="S1654_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1656_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1656_Description" xml:space="preserve">
    <value>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</value>
  </data>
  <data name="S1656_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1656_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1656_RemediationCost" xml:space="preserve">
    <value>3min</value>
  </data>
  <data name="S1656_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1656_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1656_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1656_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1656_Title" xml:space="preserve">
    <value>Variables should not be self-assigned</value>
  </data>
  <data name="S1656_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1659_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1659_Description" xml:space="preserve">
    <value>Declaring multiple variable on one line is difficult to read.</value>
  </data>
  <data name="S1659_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1659_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1659_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1659_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1659_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1659_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1659_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S1659_Title" xml:space="preserve">
    <value>Multiple variables should not be declared on the same line</value>
  </data>
  <data name="S1659_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1751_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1751_Description" xml:space="preserve">
    <value>A loop with at most one iteration is equivalent to the use of an if statement to conditionally execute one piece of code. No developer expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an if statement should be used instead.</value>
  </data>
  <data name="S1751_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1751_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1751_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1751_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1751_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1751_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1751_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1751_Title" xml:space="preserve">
    <value>Loops with at most one iteration should be refactored</value>
  </data>
  <data name="S1751_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1764_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1764_Description" xml:space="preserve">
    <value>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</value>
  </data>
  <data name="S1764_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1764_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1764_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1764_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1764_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1764_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1764_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1764_Title" xml:space="preserve">
    <value>Identical expressions should not be used on both sides of a binary operator</value>
  </data>
  <data name="S1764_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1821_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1821_Description" xml:space="preserve">
    <value>Nested Select Case structures are difficult to understand because you can easily confuse the cases of an inner Select Case as belonging to an outer statement. Therefore nested Select Case statements should be avoided.</value>
  </data>
  <data name="S1821_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1821_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1821_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1821_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1821_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1821_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1821_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S1821_Title" xml:space="preserve">
    <value>"Select Case" statements should not be nested</value>
  </data>
  <data name="S1821_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1862_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1862_Description" xml:space="preserve">
    <value>A chain of If/ElseIf statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to True.</value>
  </data>
  <data name="S1862_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1862_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1862_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1862_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1862_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1862_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1862_Tags" xml:space="preserve">
    <value>unused,pitfall</value>
  </data>
  <data name="S1862_Title" xml:space="preserve">
    <value>Related "If/ElseIf" statements should not have the same condition</value>
  </data>
  <data name="S1862_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1871_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1871_Description" xml:space="preserve">
    <value>Having two Cases in the same Select statement or branches in the same If structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an If structure they should be combined, or for a Select, one should fall through to the other.</value>
  </data>
  <data name="S1871_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1871_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1871_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1871_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1871_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1871_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1871_Tags" xml:space="preserve">
    <value>design,suspicious</value>
  </data>
  <data name="S1871_Title" xml:space="preserve">
    <value>Two branches in a conditional structure should not have exactly the same implementation</value>
  </data>
  <data name="S1871_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1940_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1940_Description" xml:space="preserve">
    <value>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</value>
  </data>
  <data name="S1940_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1940_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1940_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1940_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1940_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1940_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S1940_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S1940_Title" xml:space="preserve">
    <value>Boolean checks should not be inverted</value>
  </data>
  <data name="S1940_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2068_Category" xml:space="preserve">
    <value>Blocker Security Hotspot</value>
  </data>
  <data name="S2068_Description" xml:space="preserve">
    <value>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true for applications that are distributed or that are open-source.</value>
  </data>
  <data name="S2068_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2068_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2068_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S2068_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2068_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2068_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2068_Tags" xml:space="preserve">
    <value>cwe,sans-top25-porous,owasp-a2</value>
  </data>
  <data name="S2068_Title" xml:space="preserve">
    <value>Hard-coded credentials are security-sensitive</value>
  </data>
  <data name="S2068_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S2077_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S2077_Description" xml:space="preserve">
    <value>Formatting strings used as SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S2077_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2077_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2077_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2077_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2077_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2077_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2077_Tags" xml:space="preserve">
    <value>cwe,owasp-a1,sans-top25-insecure,bad-practice,sql</value>
  </data>
  <data name="S2077_Title" xml:space="preserve">
    <value>Formatting SQL queries is security-sensitive</value>
  </data>
  <data name="S2077_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S2178_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2178_Description" xml:space="preserve">
    <value>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances. </value>
  </data>
  <data name="S2178_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2178_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2178_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2178_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2178_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2178_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2178_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2178_Title" xml:space="preserve">
    <value>Short-circuit logic should be used in boolean contexts</value>
  </data>
  <data name="S2178_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2234_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2234_Description" xml:space="preserve">
    <value>When the names of parameters in a procedure call match the names of the procedure arguments, it contributes to a clearer, more readable code. However, when the names match but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead to unexpected results.</value>
  </data>
  <data name="S2234_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2234_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2234_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2234_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2234_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2234_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2234_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2234_Title" xml:space="preserve">
    <value>Parameters should be passed in the correct order</value>
  </data>
  <data name="S2234_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2255_Category" xml:space="preserve">
    <value>Minor Security Hotspot</value>
  </data>
  <data name="S2255_Description" xml:space="preserve">
    <value>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S2255_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2255_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2255_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2255_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2255_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2255_Status" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="S2255_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2255_Title" xml:space="preserve">
    <value>Writing cookies is security-sensitive</value>
  </data>
  <data name="S2255_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S2257_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S2257_Description" xml:space="preserve">
    <value>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Standard algorithms like AES, RSA, SHA, ... should be used instead.</value>
  </data>
  <data name="S2257_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2257_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2257_RemediationCost" xml:space="preserve">
    <value>1d</value>
  </data>
  <data name="S2257_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2257_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2257_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2257_Tags" xml:space="preserve">
    <value>cwe,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S2257_Title" xml:space="preserve">
    <value>Using non-standard cryptographic algorithms is security-sensitive</value>
  </data>
  <data name="S2257_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S2302_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2302_Description" xml:space="preserve">
    <value>Because parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use NameOf(), and the string that's output will always be correct.</value>
  </data>
  <data name="S2302_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2302_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2302_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2302_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2302_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2302_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2302_Tags" xml:space="preserve">
    <value>c#6</value>
  </data>
  <data name="S2302_Title" xml:space="preserve">
    <value>"NameOf" should be used</value>
  </data>
  <data name="S2302_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2304_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2304_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular expression.</value>
  </data>
  <data name="S2304_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2304_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2304_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2304_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2304_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2304_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2304_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2304_Title" xml:space="preserve">
    <value>Namespace names should comply with a naming convention</value>
  </data>
  <data name="S2304_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2339_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2339_Description" xml:space="preserve">
    <value>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</value>
  </data>
  <data name="S2339_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2339_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2339_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2339_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2339_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2339_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2339_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2339_Title" xml:space="preserve">
    <value>Public constant members should not be used</value>
  </data>
  <data name="S2339_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2340_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2340_Description" xml:space="preserve">
    <value>A Do ... Loop without a While or Until condition must be terminated by an unstructured Exit Do statement. It is safer and more readable to use structured loops instead.</value>
  </data>
  <data name="S2340_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2340_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2340_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2340_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2340_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2340_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2340_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2340_Title" xml:space="preserve">
    <value>"Do" loops should not be used without a "While" or "Until" condition</value>
  </data>
  <data name="S2340_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2342_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2342_Description" xml:space="preserve">
    <value>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.</value>
  </data>
  <data name="S2342_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2342_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2342_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2342_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2342_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2342_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2342_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2342_Title" xml:space="preserve">
    <value>Enumeration types should comply with a naming convention</value>
  </data>
  <data name="S2342_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2343_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2343_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all enumeration value names match a provided regular expression.</value>
  </data>
  <data name="S2343_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2343_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2343_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2343_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2343_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2343_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2343_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2343_Title" xml:space="preserve">
    <value>Enumeration values should comply with a naming convention</value>
  </data>
  <data name="S2343_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2344_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2344_Description" xml:space="preserve">
    <value>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</value>
  </data>
  <data name="S2344_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2344_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2344_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2344_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2344_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2344_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2344_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2344_Title" xml:space="preserve">
    <value>Enumeration type names should not have "Flags" or "Enum" suffixes</value>
  </data>
  <data name="S2344_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2345_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S2345_Description" xml:space="preserve">
    <value>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or operator in a useful way.</value>
  </data>
  <data name="S2345_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2345_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2345_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2345_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2345_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2345_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2345_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2345_Title" xml:space="preserve">
    <value>Flags enumerations should explicitly initialize all their members</value>
  </data>
  <data name="S2345_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2346_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2346_Description" xml:space="preserve">
    <value>Consistent use of "None" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other state, since there is no way to check that the bit 0 is set.</value>
  </data>
  <data name="S2346_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2346_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2346_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2346_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2346_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2346_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2346_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2346_Title" xml:space="preserve">
    <value>Flags enumerations zero-value members should be named "None"</value>
  </data>
  <data name="S2346_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2347_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2347_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even handler names match a provided regular expression.</value>
  </data>
  <data name="S2347_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2347_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2347_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2347_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2347_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2347_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2347_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2347_Title" xml:space="preserve">
    <value>Event handlers should comply with a naming convention</value>
  </data>
  <data name="S2347_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2348_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2348_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even names match a provided regular expression.</value>
  </data>
  <data name="S2348_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2348_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2348_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2348_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2348_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2348_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2348_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2348_Title" xml:space="preserve">
    <value>Events should comply with a naming convention</value>
  </data>
  <data name="S2348_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2349_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2349_Description" xml:space="preserve">
    <value>"After" and "Before" prefixes or suffixes should not be used to indicate pre and post events. The concepts of before and after should be given to events using the present and past tense.</value>
  </data>
  <data name="S2349_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2349_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2349_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2349_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2349_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2349_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2349_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2349_Title" xml:space="preserve">
    <value>Event names should not have "Before" or "After" as a prefix or suffix</value>
  </data>
  <data name="S2349_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2352_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2352_Description" xml:space="preserve">
    <value>Indexed properties are meant to represent access to a logical collection. When multiple parameters are required, this design guideline may be violated, and refactoring the property into a method is preferable.</value>
  </data>
  <data name="S2352_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2352_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2352_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2352_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2352_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2352_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2352_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2352_Title" xml:space="preserve">
    <value>Indexed properties with more than one parameter should not be used</value>
  </data>
  <data name="S2352_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2353_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2353_Description" xml:space="preserve">
    <value>In most cases, indexed properties should be named Item for consistency. Exceptions are when there exists a name which is obviously better, for example System.String.Chars(System.Int32).</value>
  </data>
  <data name="S2353_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2353_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2353_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2353_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2353_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2353_Status" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="S2353_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2353_Title" xml:space="preserve">
    <value>Indexed properties should be named "Item"</value>
  </data>
  <data name="S2353_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2354_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2354_Description" xml:space="preserve">
    <value>To improve the code readability, the explicit line continuation character, _, should not be used. Instead, it is better to break lines after an operator.</value>
  </data>
  <data name="S2354_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2354_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2354_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2354_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2354_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2354_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2354_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2354_Title" xml:space="preserve">
    <value>Line continuations should not be used</value>
  </data>
  <data name="S2354_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2355_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2355_Description" xml:space="preserve">
    <value>Array literals are more compact than array creation expressions.</value>
  </data>
  <data name="S2355_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2355_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2355_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2355_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2355_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2355_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2355_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2355_Title" xml:space="preserve">
    <value>Array literals should be used instead of array creation expressions</value>
  </data>
  <data name="S2355_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2357_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2357_Description" xml:space="preserve">
    <value>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and validation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties. Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</value>
  </data>
  <data name="S2357_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2357_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2357_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S2357_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2357_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2357_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2357_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2357_Title" xml:space="preserve">
    <value>Fields should be private</value>
  </data>
  <data name="S2357_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2358_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2358_Description" xml:space="preserve">
    <value>The ... IsNot ... syntax is more compact and more readable than the Not ... Is ... syntax.</value>
  </data>
  <data name="S2358_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2358_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2358_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2358_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2358_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2358_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2358_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2358_Title" xml:space="preserve">
    <value>"IsNot" should be used instead of "Not ... Is ..."</value>
  </data>
  <data name="S2358_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2359_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2359_Description" xml:space="preserve">
    <value>Prefer the use of Try ... Catch blocks instead of On Error statements.</value>
  </data>
  <data name="S2359_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2359_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2359_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2359_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2359_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2359_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2359_Tags" xml:space="preserve">
    <value>bad-practice</value>
  </data>
  <data name="S2359_Title" xml:space="preserve">
    <value>"On Error" statements should not be used</value>
  </data>
  <data name="S2359_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2360_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2360_Description" xml:space="preserve">
    <value>The overloading mechanism should be used in place of optional parameters for several reasons:</value>
  </data>
  <data name="S2360_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2360_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2360_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2360_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2360_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2360_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2360_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2360_Title" xml:space="preserve">
    <value>Optional parameters should not be used</value>
  </data>
  <data name="S2360_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2362_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2362_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all Private Const field names comply with the provided regular expression.</value>
  </data>
  <data name="S2362_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2362_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2362_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2362_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2362_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2362_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2362_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2362_Title" xml:space="preserve">
    <value>Private constants should comply with a naming convention</value>
  </data>
  <data name="S2362_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2363_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2363_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all Private Shared ReadOnly field names comply with the provided regular expression.</value>
  </data>
  <data name="S2363_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2363_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2363_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2363_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2363_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2363_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2363_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2363_Title" xml:space="preserve">
    <value>"Private Shared ReadOnly" fields should comply with a naming convention</value>
  </data>
  <data name="S2363_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2364_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2364_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all Private field names match the provided regular expression.</value>
  </data>
  <data name="S2364_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2364_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2364_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2364_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2364_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2364_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2364_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2364_Title" xml:space="preserve">
    <value>"Private" fields should comply with a naming convention</value>
  </data>
  <data name="S2364_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2365_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2365_Description" xml:space="preserve">
    <value>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will be much slower than a simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so that callers are not surprised by unexpectedly poor performance.</value>
  </data>
  <data name="S2365_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2365_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2365_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2365_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2365_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2365_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2365_Tags" xml:space="preserve">
    <value>api-design,performance</value>
  </data>
  <data name="S2365_Title" xml:space="preserve">
    <value>Properties should not make collection or array copies</value>
  </data>
  <data name="S2365_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2366_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2366_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that property names match a provided regular expression.</value>
  </data>
  <data name="S2366_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2366_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2366_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2366_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2366_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2366_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2366_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2366_Title" xml:space="preserve">
    <value>Properties should comply with a naming convention</value>
  </data>
  <data name="S2366_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2367_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2367_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private Const field names comply with the provided regular expression.</value>
  </data>
  <data name="S2367_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2367_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2367_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2367_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2367_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2367_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2367_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2367_Title" xml:space="preserve">
    <value>Non-private constants should comply with a naming convention</value>
  </data>
  <data name="S2367_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2368_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2368_Description" xml:space="preserve">
    <value>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used internally.</value>
  </data>
  <data name="S2368_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2368_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2368_RemediationCost" xml:space="preserve">
    <value>1h</value>
  </data>
  <data name="S2368_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2368_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2368_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2368_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2368_Title" xml:space="preserve">
    <value>Public methods should not have multidimensional array parameters</value>
  </data>
  <data name="S2368_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2369_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2369_Description" xml:space="preserve">
    <value>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private fields names match a provided regular expression. </value>
  </data>
  <data name="S2369_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2369_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2369_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2369_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2369_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2369_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2369_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2369_Title" xml:space="preserve">
    <value>Non-private fields should comply with a naming convention</value>
  </data>
  <data name="S2369_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2370_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2370_Description" xml:space="preserve">
    <value>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all non-private Shared ReadOnly fields names match a provided regular expression.</value>
  </data>
  <data name="S2370_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2370_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2370_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2370_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2370_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2370_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2370_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2370_Title" xml:space="preserve">
    <value>Non-private "Shared ReadOnly" fields should comply with a naming convention</value>
  </data>
  <data name="S2370_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2372_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2372_Description" xml:space="preserve">
    <value>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method. </value>
  </data>
  <data name="S2372_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2372_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2372_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2372_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2372_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2372_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2372_Tags" xml:space="preserve">
    <value>error-handling</value>
  </data>
  <data name="S2372_Title" xml:space="preserve">
    <value>Exceptions should not be thrown from property getters</value>
  </data>
  <data name="S2372_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2373_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2373_Description" xml:space="preserve">
    <value>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all generic type parameter names match a provided regular expression.</value>
  </data>
  <data name="S2373_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2373_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2373_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2373_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2373_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2373_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2373_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2373_Title" xml:space="preserve">
    <value>Generic type parameter names should comply with a naming convention</value>
  </data>
  <data name="S2373_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2374_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2374_Description" xml:space="preserve">
    <value>Unsigned integers have different arithmetic operators than signed ones - operators that few developers understand. Therefore, signed types should be preferred where possible.</value>
  </data>
  <data name="S2374_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2374_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2374_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2374_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2374_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2374_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2374_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2374_Title" xml:space="preserve">
    <value>Signed types should be preferred to unsigned ones</value>
  </data>
  <data name="S2374_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2375_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2375_Description" xml:space="preserve">
    <value>Using the With statement for a series of calls to the same object makes the code more readable.</value>
  </data>
  <data name="S2375_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2375_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2375_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2375_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2375_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2375_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2375_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2375_Title" xml:space="preserve">
    <value>"With" statements should be used for a series of calls to the same object</value>
  </data>
  <data name="S2375_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2376_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2376_Description" xml:space="preserve">
    <value>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be replaced with a setter method.</value>
  </data>
  <data name="S2376_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2376_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2376_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2376_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2376_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2376_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2376_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2376_Title" xml:space="preserve">
    <value>Write-only properties should not be used</value>
  </data>
  <data name="S2376_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2429_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2429_Description" xml:space="preserve">
    <value>The ... = {} syntax is more compact, more readable and less error-prone.</value>
  </data>
  <data name="S2429_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2429_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2429_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2429_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2429_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2429_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2429_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2429_Title" xml:space="preserve">
    <value>Arrays should be initialized using the "... = {}" syntax</value>
  </data>
  <data name="S2429_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2551_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S2551_Description" xml:space="preserve">
    <value>Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the same lock for another unrelated purpose. </value>
  </data>
  <data name="S2551_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2551_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2551_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2551_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2551_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2551_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2551_Tags" xml:space="preserve">
    <value>multi-threading</value>
  </data>
  <data name="S2551_Title" xml:space="preserve">
    <value>Shared resources should not be used for locking</value>
  </data>
  <data name="S2551_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2737_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2737_Description" xml:space="preserve">
    <value>A Catch clause that only rethrows the caught exception has the same effect as omitting the Catch altogether and letting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </value>
  </data>
  <data name="S2737_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2737_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2737_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2737_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2737_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2737_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2737_Tags" xml:space="preserve">
    <value>error-handling,unused,finding,clumsy</value>
  </data>
  <data name="S2737_Title" xml:space="preserve">
    <value>"catch" clauses should do more than rethrow</value>
  </data>
  <data name="S2737_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2757_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2757_Description" xml:space="preserve">
    <value>The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=) will compile and run, but not produce the expected results.</value>
  </data>
  <data name="S2757_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2757_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2757_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2757_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2757_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2757_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2757_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2757_Title" xml:space="preserve">
    <value>"=+" should not be used instead of "+="</value>
  </data>
  <data name="S2757_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2761_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2761_Description" xml:space="preserve">
    <value>Calling the Not operator twice does nothing: the second invocation undoes the first. Either this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.</value>
  </data>
  <data name="S2761_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2761_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2761_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2761_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2761_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2761_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2761_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2761_Title" xml:space="preserve">
    <value>'Not' boolean operator should not be repeated</value>
  </data>
  <data name="S2761_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2951_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2951_Description" xml:space="preserve">
    <value>Visual Basic .NET, unlike many other programming languages, has no "fall-through" for its Select cases. Each case already has an implicit Exit Select as its last instruction. It therefore is redundant to explicitly add one.</value>
  </data>
  <data name="S2951_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2951_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2951_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2951_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2951_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2951_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S2951_Tags" xml:space="preserve">
    <value>unused,clumsy</value>
  </data>
  <data name="S2951_Title" xml:space="preserve">
    <value>VB.Net: "Exit Select" statements should not be used redundantly</value>
  </data>
  <data name="S2951_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3011_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3011_Description" xml:space="preserve">
    <value>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a field value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time errors.</value>
  </data>
  <data name="S3011_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3011_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3011_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S3011_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3011_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3011_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3011_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3011_Title" xml:space="preserve">
    <value>Reflection should not be used to increase accessibility of classes, methods, or fields</value>
  </data>
  <data name="S3011_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3358_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3358_Description" xml:space="preserve">
    <value>Just because you can do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you) scratching their heads and cursing.</value>
  </data>
  <data name="S3358_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3358_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3358_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3358_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3358_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3358_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3358_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S3358_Title" xml:space="preserve">
    <value>If operators should not be nested</value>
  </data>
  <data name="S3358_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3385_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3385_Description" xml:space="preserve">
    <value>Other than Exit Select, using an Exit statement is never a good idea.</value>
  </data>
  <data name="S3385_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3385_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3385_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3385_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3385_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3385_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3385_Tags" xml:space="preserve">
    <value>brain-overload,bad-practice</value>
  </data>
  <data name="S3385_Title" xml:space="preserve">
    <value>"Exit" statements should not be used</value>
  </data>
  <data name="S3385_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3449_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S3449_Description" xml:space="preserve">
    <value>Numbers can be shifted with the &lt;&lt; and &gt;&gt; operators, but the right operand of the operation needs to be an int or a type that has an implicit conversion to int. However, with dynamic, the compiler's type checking is turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to int at runtime, then a RuntimeBinderException will be raised.</value>
  </data>
  <data name="S3449_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3449_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3449_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3449_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3449_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3449_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3449_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3449_Title" xml:space="preserve">
    <value>Right operands of shift operators should be integers</value>
  </data>
  <data name="S3449_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3453_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3453_Description" xml:space="preserve">
    <value>A class with only private constructors can't be instantiated, thus, it seems to be pointless code.</value>
  </data>
  <data name="S3453_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3453_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3453_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3453_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3453_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3453_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3453_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S3453_Title" xml:space="preserve">
    <value>Classes should not have only "private" constructors</value>
  </data>
  <data name="S3453_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3464_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S3464_Description" xml:space="preserve">
    <value>Recursion is acceptable in methods, where you can break out of it. But with class types, you end up with code that will compile but not run if you try to instantiate the class.</value>
  </data>
  <data name="S3464_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3464_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3464_RemediationCost" xml:space="preserve">
    <value>1h</value>
  </data>
  <data name="S3464_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3464_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3464_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3464_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3464_Title" xml:space="preserve">
    <value>Type inheritance should not be recursive</value>
  </data>
  <data name="S3464_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3466_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3466_Description" xml:space="preserve">
    <value>Generally, writing the least code that will readably do the job is a good thing, so omitting default parameter values seems to make sense. Unfortunately, when you omit them from the base call in an override, you're not actually getting the job done thoroughly, because you're ignoring the value the caller passed in. The result will likely not be what the caller expected.</value>
  </data>
  <data name="S3466_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3466_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3466_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3466_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3466_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3466_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3466_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3466_Title" xml:space="preserve">
    <value>Optional parameters should be passed to "base" calls</value>
  </data>
  <data name="S3466_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3598_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3598_Description" xml:space="preserve">
    <value>When declaring a Windows Communication Foundation (WCF) OperationContract method one-way, that service method won't return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return type therefore does not make sense.</value>
  </data>
  <data name="S3598_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3598_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3598_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3598_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3598_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3598_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3598_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3598_Title" xml:space="preserve">
    <value>One-way "OperationContract" methods should have "void" return type</value>
  </data>
  <data name="S3598_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3603_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3603_Description" xml:space="preserve">
    <value>Marking a method with the Pure attribute specifies that the method doesn't make any visible changes; thus, the method should return a result, otherwise the call to the method should be equal to no-operation. So Pure on a void method is either a mistake, or the method doesn't do any meaningful task.</value>
  </data>
  <data name="S3603_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3603_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3603_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3603_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3603_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3603_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3603_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3603_Title" xml:space="preserve">
    <value>Methods with "Pure" attribute should return a value </value>
  </data>
  <data name="S3603_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3693_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S3693_Description" xml:space="preserve">
    <value>It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an exception constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely that an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will lead to program termination.</value>
  </data>
  <data name="S3693_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3693_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3693_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3693_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3693_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3693_Status" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="S3693_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3693_Title" xml:space="preserve">
    <value>Exception constructors should not throw exceptions</value>
  </data>
  <data name="S3693_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3776_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3776_Description" xml:space="preserve">
    <value>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be difficult to maintain.</value>
  </data>
  <data name="S3776_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3776_Remediation" xml:space="preserve">
    <value />
  </data>
  <data name="S3776_RemediationCost" xml:space="preserve">
    <value />
  </data>
  <data name="S3776_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3776_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3776_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3776_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S3776_Title" xml:space="preserve">
    <value>Cognitive Complexity of functions should not be too high</value>
  </data>
  <data name="S3776_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3860_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3860_Description" xml:space="preserve">
    <value>Since Visual Studio 2010 SP1, the ByVal parameter modifier is implicitly applied, and therefore not required anymore. Removing it from your source code will improve readability.</value>
  </data>
  <data name="S3860_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3860_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3860_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3860_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3860_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3860_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3860_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S3860_Title" xml:space="preserve">
    <value>"ByVal" should not be used</value>
  </data>
  <data name="S3860_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3866_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3866_Description" xml:space="preserve">
    <value>Visual Basic .NET offers a non-short-circuit conditional function, IIf(), which returns either its second or third parameter based on the expression in the first parameter. Using it is slower than using If() because each parameter is unconditionally evaluated. Further, its use can lead to runtime exceptions because IIf always evaluates all three of its arguments. </value>
  </data>
  <data name="S3866_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3866_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3866_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3866_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3866_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3866_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3866_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S3866_Title" xml:space="preserve">
    <value>"IIf" should not be used</value>
  </data>
  <data name="S3866_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3869_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S3869_Description" xml:space="preserve">
    <value>Not surprisingly, the SafeHandle.DangerousGetHandle method is dangerous. That's because it may not return a valid handle. Using it can lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should simply be avoided altogether.</value>
  </data>
  <data name="S3869_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3869_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3869_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3869_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3869_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3869_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3869_Tags" xml:space="preserve">
    <value>leak,unpredictable</value>
  </data>
  <data name="S3869_Title" xml:space="preserve">
    <value>"SafeHandle.DangerousGetHandle" should not be called</value>
  </data>
  <data name="S3869_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3889_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S3889_Description" xml:space="preserve">
    <value>Thread.Suspend and Thread.Resume can give unpredictable results, and both methods have been deprecated. Indeed, if Thread.Suspend is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer synchronization mechanisms should be used, such as Monitor, Mutex, and Semaphore.</value>
  </data>
  <data name="S3889_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3889_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3889_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3889_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3889_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3889_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3889_Tags" xml:space="preserve">
    <value>multi-threading,unpredictable</value>
  </data>
  <data name="S3889_Title" xml:space="preserve">
    <value>Neither "Thread.Resume" nor "Thread.Suspend" should be used</value>
  </data>
  <data name="S3889_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3903_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3903_Description" xml:space="preserve">
    <value>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are defined outside any named namespace are in a global namespace that cannot be referenced in code.</value>
  </data>
  <data name="S3903_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3903_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3903_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3903_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3903_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3903_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3903_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3903_Title" xml:space="preserve">
    <value>Types should be defined in named namespaces</value>
  </data>
  <data name="S3903_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3923_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3923_Description" xml:space="preserve">
    <value>Having all branches in a Select Case or If chain with the same implementation is an error. Either a copy-paste error was made and something different should be executed, or there shouldn't be a Select Case / If chain at all.</value>
  </data>
  <data name="S3923_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3923_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3923_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3923_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3923_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3923_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3923_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3923_Title" xml:space="preserve">
    <value>All branches in a conditional structure should not have exactly the same implementation</value>
  </data>
  <data name="S3923_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3926_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3926_Description" xml:space="preserve">
    <value>Fields marked with System.Runtime.Serialization.OptionalFieldAttribute are serialized just like any other field. But such fields are ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to set such fields during the deserialization process.</value>
  </data>
  <data name="S3926_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3926_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3926_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3926_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3926_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3926_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3926_Tags" xml:space="preserve">
    <value>serialization</value>
  </data>
  <data name="S3926_Title" xml:space="preserve">
    <value>Deserialization methods should be provided for "OptionalField" members</value>
  </data>
  <data name="S3926_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3927_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3927_Description" xml:space="preserve">
    <value>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated de/serialization.</value>
  </data>
  <data name="S3927_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3927_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3927_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3927_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3927_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3927_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3927_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3927_Title" xml:space="preserve">
    <value>Serialization event handlers should be implemented correctly</value>
  </data>
  <data name="S3927_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3981_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3981_Description" xml:space="preserve">
    <value>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or equal to zero doesn't make sense, since the result is always true. Similarly testing that it is less than zero will always return false. Perhaps the intent was to check the non-emptiness of the collection or array instead. </value>
  </data>
  <data name="S3981_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3981_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3981_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3981_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3981_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3981_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S3981_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3981_Title" xml:space="preserve">
    <value>Collection sizes and array length comparisons should make sense</value>
  </data>
  <data name="S3981_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4136_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4136_Description" xml:space="preserve">
    <value>For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current available options.</value>
  </data>
  <data name="S4136_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4136_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4136_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S4136_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4136_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4136_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4136_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S4136_Title" xml:space="preserve">
    <value>Method overloads should be grouped together</value>
  </data>
  <data name="S4136_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4142_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4142_Description" xml:space="preserve">
    <value>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was intended for one of the arguments.</value>
  </data>
  <data name="S4142_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4142_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4142_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4142_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4142_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4142_Status" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="S4142_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4142_Title" xml:space="preserve">
    <value>Duplicate values should not be passed as arguments</value>
  </data>
  <data name="S4142_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4143_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S4143_Description" xml:space="preserve">
    <value>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.</value>
  </data>
  <data name="S4143_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4143_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4143_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4143_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4143_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4143_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4143_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S4143_Title" xml:space="preserve">
    <value>Map values should not be replaced unconditionally</value>
  </data>
  <data name="S4143_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4144_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4144_Description" xml:space="preserve">
    <value>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may be confusing to maintainers. In the latter case, one implementation should invoke the other.</value>
  </data>
  <data name="S4144_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4144_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4144_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4144_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4144_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4144_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4144_Tags" xml:space="preserve">
    <value>confusing,duplicate,suspicious</value>
  </data>
  <data name="S4144_Title" xml:space="preserve">
    <value>Methods should not have identical implementations</value>
  </data>
  <data name="S4144_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4159_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S4159_Description" xml:space="preserve">
    <value>In the Attributed Programming Model, the ExportAttribute declares that a part "exports", or provides to the composition container, an object that fulfills a particular contract. During composition, parts with imports that have matching contracts will have those dependencies filled by the exported object.</value>
  </data>
  <data name="S4159_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4159_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4159_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4159_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4159_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S4159_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4159_Tags" xml:space="preserve">
    <value>mef,pitfall</value>
  </data>
  <data name="S4159_Title" xml:space="preserve">
    <value>Classes should implement their "ExportAttribute" interfaces</value>
  </data>
  <data name="S4159_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4201_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4201_Description" xml:space="preserve">
    <value>There's no need to null test in conjunction with an TypeOf ... Is test. Nothing is not an instance of anything, so a null check is redundant.</value>
  </data>
  <data name="S4201_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4201_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4201_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4201_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4201_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4201_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4201_Tags" xml:space="preserve">
    <value>redundant</value>
  </data>
  <data name="S4201_Title" xml:space="preserve">
    <value>Null checks should not be used with "TypeOf Is"</value>
  </data>
  <data name="S4201_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4210_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S4210_Description" xml:space="preserve">
    <value>When an assembly uses Windows Forms (classes and interfaces from the System.Windows.Forms namespace) its entry point should be marked with the STAThreadAttribute to indicate that the threading model should be "Single-Threaded Apartment" (STA) which is the only one supported by Windows Forms.</value>
  </data>
  <data name="S4210_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4210_Remediation" xml:space="preserve">
    <value />
  </data>
  <data name="S4210_RemediationCost" xml:space="preserve">
    <value />
  </data>
  <data name="S4210_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4210_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4210_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4210_Tags" xml:space="preserve">
    <value>winforms,pitfall</value>
  </data>
  <data name="S4210_Title" xml:space="preserve">
    <value>Windows Forms entry points should be marked with STAThread</value>
  </data>
  <data name="S4210_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4260_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S4260_Description" xml:space="preserve">
    <value>When creating a custom Markup Extension that accepts parameters in WPF, the ConstructorArgument markup must be used to identify the discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</value>
  </data>
  <data name="S4260_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4260_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4260_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4260_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4260_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4260_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4260_Tags" xml:space="preserve">
    <value>xaml,wpf</value>
  </data>
  <data name="S4260_Title" xml:space="preserve">
    <value>"ConstructorArgument" parameters should exist in constructors</value>
  </data>
  <data name="S4260_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4275_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S4275_Description" xml:space="preserve">
    <value>Properties provide a way to enforce encapsulation by providing public, protected or internal methods that give controlled access to private fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed properties, which can result in the wrong field being accessed by a getter or setter.</value>
  </data>
  <data name="S4275_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4275_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4275_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4275_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4275_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4275_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4275_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4275_Title" xml:space="preserve">
    <value>Getters and setters should access the expected fields</value>
  </data>
  <data name="S4275_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4277_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S4277_Description" xml:space="preserve">
    <value>Marking a class with PartCreationPolicy(CreationPolicy.Shared), which is part of Managed Extensibility Framework (MEF), means that a single, shared instance of the exported object will be created. Therefore it doesn't make sense to create new instances using the constructor and it will most likely result in unexpected behaviours.</value>
  </data>
  <data name="S4277_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4277_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4277_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4277_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4277_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4277_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4277_Tags" xml:space="preserve">
    <value>mef,pitfall</value>
  </data>
  <data name="S4277_Title" xml:space="preserve">
    <value>"Shared" parts should not be created with "new"</value>
  </data>
  <data name="S4277_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4423_Category" xml:space="preserve">
    <value>Major Vulnerability</value>
  </data>
  <data name="S4423_Description" xml:space="preserve">
    <value>Older versions of SSL/TLS protocol like "SSLv3" have been proven to be insecure.</value>
  </data>
  <data name="S4423_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4423_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4423_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4423_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4423_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4423_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4423_Tags" xml:space="preserve">
    <value>cwe,privacy,owasp-a6,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S4423_Title" xml:space="preserve">
    <value>Weak SSL/TLS protocols should not be used</value>
  </data>
  <data name="S4423_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S4428_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S4428_Description" xml:space="preserve">
    <value>The PartCreationPolicyAttribute attribute, which is part of the Managed Extensibility Framework (MEF), is used to specify how the exported object will be created. Therefore it doesn't make sense not to export this a class with this attribute using the ExportAttribute attribute.</value>
  </data>
  <data name="S4428_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4428_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4428_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4428_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4428_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4428_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4428_Tags" xml:space="preserve">
    <value>mef,pitfall</value>
  </data>
  <data name="S4428_Title" xml:space="preserve">
    <value>"PartCreationPolicyAttribute" should be used with "ExportAttribute"</value>
  </data>
  <data name="S4428_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4507_Category" xml:space="preserve">
    <value>Minor Security Hotspot</value>
  </data>
  <data name="S4507_Description" xml:space="preserve">
    <value>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4507_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4507_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4507_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S4507_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4507_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4507_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4507_Tags" xml:space="preserve">
    <value>cwe,error-handling,debug,user-experience,owasp-a3</value>
  </data>
  <data name="S4507_Title" xml:space="preserve">
    <value>Delivering code in production with debug features activated is security-sensitive</value>
  </data>
  <data name="S4507_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4586_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S4586_Description" xml:space="preserve">
    <value>Returning Nothing from a non-async Task/Task(Of T) method will cause a NullReferenceException at runtime. This problem can be avoided by returning Task.FromResult(Of T)(Nothing) instead.</value>
  </data>
  <data name="S4586_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4586_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4586_RemediationCost" xml:space="preserve">
    <value>5 min</value>
  </data>
  <data name="S4586_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4586_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4586_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4586_Tags" xml:space="preserve">
    <value>async-await</value>
  </data>
  <data name="S4586_Title" xml:space="preserve">
    <value>Non-async "Task/Task&lt;T&gt;" methods should not return null</value>
  </data>
  <data name="S4586_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4784_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4784_Description" xml:space="preserve">
    <value>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4784_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4784_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4784_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4784_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4784_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4784_Title" xml:space="preserve">
    <value>Using regular expressions is security-sensitive</value>
  </data>
  <data name="S4784_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4787_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4787_Description" xml:space="preserve">
    <value>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4787_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4787_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4787_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4787_Status" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="S4787_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4787_Title" xml:space="preserve">
    <value>Encrypting data is security-sensitive</value>
  </data>
  <data name="S4787_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4790_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4790_Description" xml:space="preserve">
    <value>Cryptographic hash algorithms such as MD2, MD4, MD5, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160 and SHA-1 are no longer considered secure, because it is too easy to create hash collisions with them (little computational effort is enough to find two or more different inputs that produces the same hash).</value>
  </data>
  <data name="S4790_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4790_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4790_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4790_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4790_Tags" xml:space="preserve">
    <value>cwe,spring,owasp-a6,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S4790_Title" xml:space="preserve">
    <value>Using weak hashing algorithms is security-sensitive</value>
  </data>
  <data name="S4790_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4792_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4792_Description" xml:space="preserve">
    <value>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4792_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4792_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4792_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4792_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4792_Tags" xml:space="preserve">
    <value>cwe,owasp-a10,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S4792_Title" xml:space="preserve">
    <value>Configuring loggers is security-sensitive</value>
  </data>
  <data name="S4792_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4818_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4818_Description" xml:space="preserve">
    <value>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4818_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4818_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4818_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4818_Status" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="S4818_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4818_Title" xml:space="preserve">
    <value>Using Sockets is security-sensitive</value>
  </data>
  <data name="S4818_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4823_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4823_Description" xml:space="preserve">
    <value>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4823_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4823_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4823_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4823_Status" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="S4823_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4823_Title" xml:space="preserve">
    <value>Using command line arguments is security-sensitive</value>
  </data>
  <data name="S4823_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4829_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4829_Description" xml:space="preserve">
    <value>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4829_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4829_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4829_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4829_Status" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="S4829_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4829_Title" xml:space="preserve">
    <value>Reading the Standard Input is security-sensitive</value>
  </data>
  <data name="S4829_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4830_Category" xml:space="preserve">
    <value>Critical Vulnerability</value>
  </data>
  <data name="S4830_Description" xml:space="preserve">
    <value>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. </value>
  </data>
  <data name="S4830_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4830_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4830_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4830_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4830_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4830_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4830_Tags" xml:space="preserve">
    <value>cwe,privacy,owasp-a6,ssl,owasp-a3</value>
  </data>
  <data name="S4830_Title" xml:space="preserve">
    <value>Server certificates should be verified during SSL/TLS connections</value>
  </data>
  <data name="S4830_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S4834_Category" xml:space="preserve">
    <value>Minor Security Hotspot</value>
  </data>
  <data name="S4834_Description" xml:space="preserve">
    <value>The access control of an application must be properly implemented in order to restrict access to resources to authorized entities otherwise this could lead to vulnerabilities:</value>
  </data>
  <data name="S4834_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4834_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4834_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4834_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S4834_Tags" xml:space="preserve">
    <value>cwe,sans-top25-porous,owasp-a5</value>
  </data>
  <data name="S4834_Title" xml:space="preserve">
    <value>Controlling permissions is security-sensitive</value>
  </data>
  <data name="S4834_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S5042_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S5042_Description" xml:space="preserve">
    <value>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can lead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of uncompressed data. To achieve this extreme compression ratio, attackers will compress irrelevant data (eg: a long string of repeated bytes). </value>
  </data>
  <data name="S5042_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S5042_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S5042_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S5042_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S5042_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S5042_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S5042_Tags" xml:space="preserve">
    <value>cwe,owasp-a6,owasp-a5</value>
  </data>
  <data name="S5042_Title" xml:space="preserve">
    <value>Expanding archive files without controlling resource consumption is security sensitive</value>
  </data>
  <data name="S5042_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S5542_Category" xml:space="preserve">
    <value>Blocker Vulnerability</value>
  </data>
  <data name="S5542_Description" xml:space="preserve">
    <value>To perform secure cryptography, operation modes and padding scheme are essentials and should be used correctly according to the encryption algorithm:</value>
  </data>
  <data name="S5542_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S5542_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S5542_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S5542_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S5542_Tags" xml:space="preserve">
    <value>cwe,privacy,owasp-a6,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S5542_Title" xml:space="preserve">
    <value>Encryption algorithms should be used with secure mode and padding scheme</value>
  </data>
  <data name="S5542_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S5659_Category" xml:space="preserve">
    <value>Critical Vulnerability</value>
  </data>
  <data name="S5659_Description" xml:space="preserve">
    <value>If a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user identities.</value>
  </data>
  <data name="S5659_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S5659_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S5659_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S5659_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S5659_Tags" xml:space="preserve">
    <value>cwe,privacy,owasp-a3</value>
  </data>
  <data name="S5659_Title" xml:space="preserve">
    <value>JWT should be signed and verified with strong cipher algorithms</value>
  </data>
  <data name="S5659_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S907_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S907_Description" xml:space="preserve">
    <value>GoTo is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such as If, For, While, or Exit should be used instead.</value>
  </data>
  <data name="S907_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S907_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S907_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S907_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S907_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S907_Status" xml:space="preserve">
    <value>ready</value>
  </data>
  <data name="S907_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S907_Title" xml:space="preserve">
    <value>"GoTo" statements should not be used</value>
  </data>
  <data name="S907_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="HelpLinkFormat" xml:space="preserve">
    <value>https://rules.sonarsource.com/vbnet/RSPEC-{0}</value>
  </data>
  <data name="RoslynLanguage" xml:space="preserve">
    <value>Visual Basic</value>
  </data>
</root>